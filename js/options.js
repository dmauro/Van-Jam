// Generated by CoffeeScript 1.3.3
(function() {
  var get_random_between;

  window.options = {};

  $(function() {
    return window.choice = new options.ChoiceList($('ul'));
  });

  get_random_between = function(min, max) {
    return Math.round(Math.random() * (max - min) + min);
  };

  options.ChoiceList = (function() {

    function ChoiceList(node) {
      this.node = node;
      this.width = this.node.width();
      this.height = this.node.height();
      this.choices = [];
      this.create_options();
      this.place_options();
    }

    ChoiceList.prototype.create_options = function() {
      var _this = this;
      return this.node.children("li").each(function(_, node) {
        return _this.choices.push(new options.Choice($(node), _this));
      });
    };

    ChoiceList.prototype.place_options = function() {
      var choice, _i, _len, _ref, _results;
      _ref = this.choices;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        _results.push(choice.place_randomly());
      }
      return _results;
    };

    return ChoiceList;

  })();

  options.Choice = (function() {

    function Choice(node, choice_list) {
      this.node = node;
      this.choice_list = choice_list;
      this.width = this.node.outerWidth(true);
      this.height = this.node.outerHeight(true);
      this.x = 0;
      this.y = 0;
    }

    Choice.prototype.check_for_collision = function(x, y) {
      var a_bottom, a_left, a_right, a_top, b_bottom, b_left, b_right, b_top, choice, _i, _len, _ref;
      a_left = x;
      a_top = y;
      a_right = x + this.width;
      a_bottom = y + this.height;
      _ref = this.choice_list.choices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        if (choice === this) {
          continue;
        }
        b_left = choice.x;
        b_top = choice.y;
        b_right = choice.x + choice.width;
        b_bottom = choice.y + choice.height;
        if (!(a_left > b_right || a_right < b_left || a_top > b_bottom || a_bottom < b_top)) {
          return true;
        }
      }
      return false;
    };

    Choice.prototype.place_at = function(x, y) {
      this.x = x;
      this.y = y;
      return this.node.css({
        left: x,
        top: y
      });
    };

    Choice.prototype.place_randomly = function() {
      var count, is_placed, try_to_place,
        _this = this;
      is_placed = false;
      try_to_place = function() {
        var x, y;
        x = get_random_between(0, _this.choice_list.width - _this.width);
        y = get_random_between(0, _this.choice_list.height - _this.height);
        if (!_this.check_for_collision(x, y)) {
          _this.place_at(x, y);
          return is_placed = true;
        }
      };
      count = 100;
      while (!is_placed) {
        try_to_place();
        count--;
        if (count === 0) {
          break;
        }
      }
    };

    return Choice;

  })();

}).call(this);

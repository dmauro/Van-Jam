// Generated by CoffeeScript 1.3.3
(function() {

  window.gui = {};

  gui.HealthBar = (function() {

    function HealthBar(bar_node_full, bar_node_temp, empty_callback, full_callback, current) {
      this.bar_node_full = bar_node_full;
      this.bar_node_temp = bar_node_temp;
      this.empty_callback = empty_callback != null ? empty_callback : null;
      this.full_callback = full_callback != null ? full_callback : null;
      this.current = current != null ? current : 100;
      this.total = 100;
      this.set_bar_width(this.get_percentage());
      this.set_bar_temp_width(0);
    }

    HealthBar.prototype.get_percentage = function() {
      return Math.round(this.current / this.total * 100);
    };

    HealthBar.prototype.set_bar_width = function(amt) {
      return this.bar_node_full.css("width", "" + amt + "%");
    };

    HealthBar.prototype.set_bar_temp_width = function(amt) {
      return this.bar_node_temp.css("width", "" + amt + "%");
    };

    HealthBar.prototype.check_current_value = function() {
      if (this.current <= 0) {
        if (typeof this.empty_callback === "function") {
          this.empty_callback();
        }
      }
      if (this.current >= 100) {
        if (typeof this.full_callback === "function") {
          return this.full_callback();
        }
      }
    };

    HealthBar.prototype.increase = function(amt) {
      var percentage_jump,
        _this = this;
      amt = Math.min(amt, this.total - this.current);
      percentage_jump = amt / this.total * 100;
      this.current += amt;
      this.set_bar_width(this.get_percentage - percentage_jump);
      this.set_bar_temp_width(percentage_jump);
      this.check_current_value();
      return setTimeout(function() {
        _this.bar_node_temp.animate({
          width: "0%"
        }, 300);
        return _this.bar_node_full.animate({
          width: "+=" + percentage_jump + "%"
        }, 300);
      }, 500);
    };

    HealthBar.prototype.reduce = function(amt) {
      var percentage_drop,
        _this = this;
      amt = Math.min(amt, this.current);
      percentage_drop = amt / this.total * 100;
      this.current -= amt;
      this.set_bar_width(this.get_percentage());
      this.set_bar_temp_width(percentage_drop);
      this.check_current_value();
      return setTimeout(function() {
        return _this.bar_node_temp.animate({
          width: "0%"
        }, 300);
      }, 500);
    };

    return HealthBar;

  })();

  $(function() {
    return window.health = new gui.HealthBar($('.health_bar .fill'), $('.health_bar .empty'), function() {
      return console.log("GAME OVER");
    }, function() {
      return console.log("MAXIMUM POWER");
    }, 100);
  });

}).call(this);
